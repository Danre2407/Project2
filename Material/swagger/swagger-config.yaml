openapi: 3.0.3
info:
  title: 'Swagger: Game Store'
  description: |-
    This is a sample Game Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io).
    
  contact:
    email: a.mcarrero@upm.es
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
  - url: http://<your_aws_api_url>/api
tags:
  - name: game
    description: Everything about Games
  - name: store
    description: Access to store orders
  - name: user
    description: Operations about user
  - name: tag
    description: All about Tags
  - name: category
    description: All about Categories

paths:
  /tag:
    get:
      tags:
        - tag
      summary: Finds Tags 
      description: Get all tags avaliable in the store
      operationId: findAllTags
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'          
  /tag/{tagId}:
    get:
      tags:
        - tag
      summary: Find tag by ID
      description: Returns a single tag
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          description: ID of tag to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: Tag not found
  /category:
    get:
      tags:
        - category
      summary: Finds Categories 
      description: Get all categories avaliable in the store
      operationId: findAllCategories
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'          
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Find category by ID
      description: Returns a single category
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
        '404':
          description: Category not found
  /game:
    post:
      tags:
        - game
      summary: Add a new game to the store
      description: Add a new game to the store
      operationId: addGame
      requestBody:
        description: Create a new game in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameCreate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'          
        '400':
          description: Bad request
        '415':
          description: Unsupported media type
    get:
      tags:
        - game
      summary: Find Games 
      description: Returns all games in the store, filtered by the patter given in parameters
      operationId: findAllGames
      parameters:
        - name: pattern
          in: query
          description: Value that need to be considered for filtering the names of the games
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'          
  /game/{gameId}:
    put:
      tags:
        - game
      summary: Update an existing game
      description: Update an existing game by Id
      operationId: updateGame
      parameters:
        - name: gameId
          in: path
          description: ID of game to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent game in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'          
        '400':
          description: Bad request
        '404':
          description: Game not found
        '415':
          description: Unsupported media type
    get:
      tags:
        - game
      summary: Find game by ID
      description: Returns a single game
      operationId: getGameById
      parameters:
        - name: gameId
          in: path
          description: ID of game to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
    delete:
      tags:
        - game
      summary: Deletes a game
      description: Deletes a game
      operationId: deleteGame
      parameters:
        - name: gameId
          in: path
          description: Game id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Invalid game identifier
        '204':
          description: Deletion performed
  
  /order:
    post:
      tags:
        - store
      summary: Place an order in the store
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '404':
          description: User or games not found
    get:
      tags:
        - store
      summary: Get all orders
      description: Get all orders of the store
      operationId: getAllOrders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Order'
  /order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Deletion performed
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Creates a user in the system
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '415':
          description: Unsupported media type
    get:
      tags:
        - user
      summary: Finds Users 
      description: Get all users
      operationId: findAllUsers
      parameters:
        - name: pattern
          in: query
          description: Value that need to be considered for filter the username
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'            
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by username
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: Updates a user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: username of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '415':
          description: Unsupported media type
    delete:
      tags:
        - user
      summary: Delete user
      description: Deletes a user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deletion performed
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        user:
          $ref: '#/components/schemas/User'
        status:
          type: string
          description: Order Status
          example: approved
        address:
          type: string
          example: 'Escuela Técnica Superior de Ingenieros Informáticos'
    OrderCreate:
      type: object
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/GamesOrder'
        user:
          type: 'object'
          properties:
            username:
              type: string
              example: 'lichking'
        status:
          type: string
          description: Order Status
          example: approved
        address:
          type: string
          example: 'Escuela Técnica Superior de Ingenieros Informáticos'
    GamesOrder:
      type: object
      properties:
        id:
          type: string
          description: 'ID of the game'
          example: 1
    Category:
      type: object
      properties:
        name:
          type: string
          example: Nintendo Switch
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
    Tag:
      type: object
      properties:
        name:
          type: string
          example: RPG
    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: Harry
        lastName:
          type: string
          example: James Potter
        email:
          type: string
          example: johnchanged@email.com
        phone:
          type: string
          example: '12345'
    Game:
      required:
        - name
        - photoUrl
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'The Legend of Zelda: Tears of the Kingdom'
        availableQuantity:
          type: integer
          format: int64
          example: 20
        category:
          $ref: '#/components/schemas/Category'
        photoUrl:
          type: string
          example: https://m.media-amazon.com/images/I/71lQbeZ5LFL._AC_SX522_.jpg
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    GameCreate:
      required:
        - name
        - photoUrl
      type: object
      properties:
        name:
          type: string
          example: 'The Legend of Zelda: Tears of the Kingdom'
        availableQuantity:
          type: integer
          format: int64
          example: 20
        category:
          type: object
          properties:
            name:
              type: string
              example: "Nintendo Switch"
        photoUrl:
          type: string
          example: https://m.media-amazon.com/images/I/81uIdB9nHdL._AC_UF1000,1000_QL80_.jpg
        tags:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: RPG
    GameUpdate:
      type: object
      properties:
        name:
          type: string
          example: 'The Legend of Zelda: Tears of the Kingdom'
        availableQuantity:
          type: integer
          format: int64
          example: 200
        category:
          type: object
          properties:
            name:
              type: string
              example: "Nintendo Switch"
        photoUrl:
          type: string
          example: https://m.media-amazon.com/images/I/81uIdB9nHdL._AC_UF1000,1000_QL80_.jpg
        tags:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: RPG
  requestBodies:
    Game:
      description: Game object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Game'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
